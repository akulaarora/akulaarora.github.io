{"version":3,"sources":["Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Table","useState","data","setData","names","parse","download","complete","output","temp","map","row","obj","reduce","accumulator","currentValue","index","push","useTable","columns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","length","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","accessor","Header","App","Box","Link","href","isExternal","Heading","textAlign","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAIaA,EAAY,WAAO,IAAD,EACHC,mBAAS,IADN,mBACpBC,EADoB,KACdC,EADc,KAErBC,EAAkB,CAAC,SAAU,OAAQ,QAAS,MAAO,MAAO,WAAY,WAAY,eAAgB,gBAAiB,cAAe,aAAc,iBAExJC,gBAAM,WAAY,CACdC,UAAU,EACVC,SAAU,SAACC,GACP,IAAIC,EAAY,GAChBD,EAAON,KAAKQ,KAAI,SAACC,GACb,IAAMC,EAAMR,EAAMS,QAAO,SAACC,EAAkBC,EAAsBC,GAE9D,OADAF,EAAYC,GAAgBJ,EAAIK,GACzBF,IACR,IAEHL,EAAKQ,KAAKL,MAEdT,EAAQM,MAhBW,MA0BvBS,mBAAc,CACdC,UACAjB,SAPAkB,EArBuB,EAqBvBA,cACAC,EAtBuB,EAsBvBA,kBACAC,EAvBuB,EAuBvBA,aACAC,EAxBuB,EAwBvBA,KACAC,EAzBuB,EAyBvBA,WAMJ,OAAoB,IAAhBtB,EAAKuB,OAED,kDAKJ,0BAAWL,IACP,+BACCE,EAAaZ,KAAI,SAACgB,GAAD,OACd,uBAAQA,EAAYC,sBACfD,EAAYE,QAAQlB,KAAI,SAACmB,GAAD,OACrB,uBAAQA,EAAOC,iBAAmBD,EAAOE,OAAO,mBAK5D,0BAAWV,IACVE,EAAKb,KAAI,SAACC,EAAUqB,GAEjB,OADAR,EAAWb,GAEP,uBAAQA,EAAIsB,cACPtB,EAAIuB,MAAMxB,KAAI,SAACyB,GACZ,OAAO,uBAAQA,EAAKC,eAAiBD,EAAKJ,OAAO,mBAUvEZ,EAAkD,CACpD,CACIkB,SAAU,SACVC,OAAQ,UAEZ,CACID,SAAU,OACVC,OAAQ,QAEZ,CACID,SAAU,QACVC,OAAQ,qBAEZ,CACID,SAAU,MACVC,OAAQ,oBAEZ,CACID,SAAU,MACVC,OAAQ,uBAEZ,CACID,SAAU,WACVC,OAAQ,iBAEZ,CACID,SAAU,WACVC,OAAQ,YAEZ,CACID,SAAU,eACVC,OAAQ,2BAEZ,CACID,SAAU,gBACVC,OAAQ,sBAEZ,CACID,SAAU,cACVC,OAAQ,yBAEZ,CACID,SAAU,aACVC,OAAQ,0BAEZ,CACID,SAAU,gBACVC,OAAQ,mCChGDC,MAdf,WACI,OACI,kBAACC,EAAA,EAAD,KACI,sDACA,kBAACC,EAAA,EAAD,CACIC,KAAK,gJACLC,YAAU,GACV,kBAACC,EAAA,EAAD,CAASC,UAAU,UAAnB,wBAEJ,kBAAC,EAAD,QCFQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4cb3b6bd.chunk.js","sourcesContent":["import React, {FC, useState} from \"react\";\r\nimport {parse} from 'papaparse'\r\nimport {useTable, Column} from 'react-table'\r\n\r\nexport const Table: FC = () => {\r\n    const [data, setData] = useState([])\r\n    const names: string[] = ['ticker', 'name', 'score', 'roa', 'ocf', 'deltaroa', 'accruals', 'deltacurrent', 'deltaleverage', 'deltashares', 'deltagross', 'deltaturnover']\r\n\r\n    parse('data.csv', {\r\n        download: true,\r\n        complete: (output) => {\r\n            let temp: any = []\r\n            output.data.map((row: any) => {\r\n                const obj = names.reduce((accumulator: any, currentValue: string, index) => {\r\n                    accumulator[currentValue] = row[index];\r\n                    return accumulator;\r\n                }, {});\r\n\r\n                temp.push(obj)\r\n            })\r\n            setData(temp)\r\n        }\r\n    });\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable<any>({\r\n        columns,\r\n        data,\r\n    })\r\n\r\n    if (data.length === 0) {\r\n        return (\r\n            <p>Loading from CSV...</p>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n            {headerGroups.map((headerGroup: any) => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map((column: any) => (\r\n                        <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                    ))}\r\n                </tr>\r\n            ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n            {rows.map((row: any, i: number) => {\r\n                prepareRow(row)\r\n                return (\r\n                    <tr {...row.getRowProps()}>\r\n                        {row.cells.map((cell: any) => {\r\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nconst columns: { accessor: string, Header: string }[] = [\r\n    {\r\n        accessor: 'ticker',\r\n        Header: \"Ticker\"\r\n    },\r\n    {\r\n        accessor: 'name',\r\n        Header: \"Name\",\r\n    },\r\n    {\r\n        accessor: 'score',\r\n        Header: \"Piotroski F-Score\",\r\n    },\r\n    {\r\n        accessor: 'roa',\r\n        Header: \"Return on Assets\",\r\n    },\r\n    {\r\n        accessor: 'ocf',\r\n        Header: \"Operating Cash Flow\",\r\n    },\r\n    {\r\n        accessor: 'deltaroa',\r\n        Header: \"Change in ROA\",\r\n    },\r\n    {\r\n        accessor: 'accruals',\r\n        Header: \"Accruals\"\r\n    },\r\n    {\r\n        accessor: 'deltacurrent',\r\n        Header: \"Change in Current Ratio\",\r\n    },\r\n    {\r\n        accessor: 'deltaleverage',\r\n        Header: \"Change in Leverage\",\r\n    },\r\n    {\r\n        accessor: 'deltashares',\r\n        Header: \"Change in # of Shares\",\r\n    },\r\n    {\r\n        accessor: 'deltagross',\r\n        Header: \"Change in Gross Margin\",\r\n    },\r\n    {\r\n        accessor: 'deltaturnover',\r\n        Header: \"Change in Asset Turnover Ratio\",\r\n    },\r\n]\r\n","import React from 'react';\nimport {Box, Heading, Link} from \"@chakra-ui/core\"\nimport { Table } from './Table';\n\n\nfunction App() {\n    return (\n        <Box>\n            <title>Piotroski's F-Score</title>\n            <Link\n                href=\"https://en.wikipedia.org/wiki/Piotroski_F-score#:~:text=Piotroski%20F%2Dscore%20is%20a,Stanford%20accounting%20professor%20Joseph%20Piotroski\"\n                isExternal>\n                <Heading textAlign=\"center\">Piotroski's F-Score</Heading>\n            </Link>\n            <Table />\n        </Box>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}